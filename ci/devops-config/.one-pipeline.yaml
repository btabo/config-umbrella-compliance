version: '1'

setup:
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.7@sha256:282677e79ccb9d20c699d384a54093894de03675752cd848a3133266c898c14c
  script: |
    #!/usr/bin/env bash

    echo "The artifact is devops-config/environments, remove everything else"
    echo find $WORKSPACE/devops-config/\* -maxdepth 0 -type d ! -name '.' ! -name '.git' ! -name '.secrets.baseline' ! -name 'environments' -exec rm -rf {} \\\;
    find $WORKSPACE/devops-config/* -maxdepth 0 -type d ! -name '.' ! -name '.git' ! -name '.secrets.baseline' ! -name 'environments' -exec rm -rf {} \;
    echo

    echo ls -la $WORKSPACE/devops-config
    ls -la $WORKSPACE/devops-config

test:
  abort_on_failure: false
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.7@sha256:282677e79ccb9d20c699d384a54093894de03675752cd848a3133266c898c14c
  script: |
    #!/usr/bin/env bash
    # nothing to do

containerize:
  dind: true
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.6@sha256:7f588468622a981f89cf5e1212aaf75fface9da6169b5345ca52ab63d8215907
  script: |
    #!/usr/bin/env bash
    # nothing to do

scan-artifact:
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.6@sha256:7f588468622a981f89cf5e1212aaf75fface9da6169b5345ca52ab63d8215907
  script: |
    #!/usr/bin/env bash
    # nothing to do

sign-artifact:
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.6@sha256:7f588468622a981f89cf5e1212aaf75fface9da6169b5345ca52ab63d8215907
  script: |
    #!/usr/bin/env bash
    # nothing to do

deploy:
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.6@sha256:7f588468622a981f89cf5e1212aaf75fface9da6169b5345ca52ab63d8215907
  script: |
    #!/usr/bin/env bash
    # nothing to do

acceptance-test:
  abort_on_failure: false
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.7@sha256:282677e79ccb9d20c699d384a54093894de03675752cd848a3133266c898c14c
  script: |
    #!/usr/bin/env bash
    # nothing to do

release:
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.6@sha256:7f588468622a981f89cf5e1212aaf75fface9da6169b5345ca52ab63d8215907
  script: |
    #!/usr/bin/env bash

    # do not add to inventory if it cannot be deployed
    # uses undocumented env vars as workaround for https://github.ibm.com/one-pipeline/adoption-issues/issues/254
    ALL_STATUS_VARS="STAGE_TEST_STATUS CRA_VULNERABILITY_RESULTS_STATUS CIS_CHECK_VULNERABILITY_RESULTS_STATUS CRA_BOM_CHECK_RESULTS_STATUS BRANCH_PROTECTION_STATUS STAGE_SCAN_ARTIFACT_STATUS STAGE_SIGN_ARTIFACT_STATUS STAGE_ACCEPTANCE_TEST_STATUS"
    for STATUS_VAR in $ALL_STATUS_VARS; do
        if [ "${!STATUS_VAR}" != "success" ]; then
            echo "$STATUS_VAR=${!STATUS_VAR}. Skipping release stage."
            exit 0
        fi
    done

    cd $WORKSPACE/devops-config

    # install cocoa cli
    export ARTIFACTORY_ID=idsorg@us.ibm.com
    export ARTIFACTORY_API_KEY="$(get_env otc_ARTIFACTORY_API_KEY)"
    COCOA_CLI_VERSION=1.5.0
    curl -u ${ARTIFACTORY_ID}:${ARTIFACTORY_API_KEY} -O "https://eu.artifactory.swg-devops.com/artifactory/wcp-compliance-automation-team-generic-local/cocoa-linux-${COCOA_CLI_VERSION}"
    cp cocoa-linux-* /usr/local/bin/cocoa
    chmod +x /usr/local/bin/cocoa
    export PATH="$PATH:/usr/local/bin/"

    # for cocoa cli
    export GHE_TOKEN="$(cat $WORKSPACE/git-token)"
    export COMMIT_SHA="$(get_env git-commit)"
    INVENTORY_REPO=$(get_env TEMP_INVENTORY_REPO "$(get_env inventory-url)" )
    GHE_ORG=${INVENTORY_REPO%/*}
    export GHE_ORG=${GHE_ORG##*/}
    GHE_REPO=${INVENTORY_REPO##*/}
    export GHE_REPO=${GHE_REPO%.git}

    cocoa inventory add \
        --environment="dev" \
        --artifact="https://github.ibm.com/ids-env/devops-config/tree/${COMMIT_SHA}/environments" \
        --repository-url="$(get_env repository)" \
        --commit-sha="${COMMIT_SHA}" \
        --build-number="${BUILD_NUMBER}" \
        --pipeline-run-id="${PIPELINE_RUN_ID}" \
        --version="$(get_env version)" \
        --name="config"

    cocoa inventory add \
        --environment="staging" \
        --artifact="https://github.ibm.com/ids-env/devops-config/tree/${COMMIT_SHA}/environments" \
        --repository-url="$(get_env repository)" \
        --commit-sha="${COMMIT_SHA}" \
        --build-number="${BUILD_NUMBER}" \
        --pipeline-run-id="${PIPELINE_RUN_ID}" \
        --version="$(get_env version)" \
        --name="config"
